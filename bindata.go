// Code generated by go-bindata.
// sources:
// assets/favicon-32x32.png
// assets/index.html
// assets/styles.css
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _favicon32x32Png = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x94\x6b\x54\xd2\x79\x1a\xc7\x7f\xa2\x09\xa2\xa4\x45\x1d\xbc\x55\xa8\x93\x5d\x90\xfc\xff\x41\x49\xb0\xbc\x0d\x69\x5a\x61\x22\x3a\xea\x98\x89\x88\x85\x66\x22\x17\x35\x53\x03\x6b\xac\xa8\xd9\x5a\xad\x4d\x5a\x36\x9b\xc9\x19\x6b\xc4\xc2\xf2\xb6\x1a\x85\x49\x6a\x62\x0c\x8e\x66\x4c\x3b\x13\x9a\x19\x45\x3a\x6a\x5e\xc6\xcd\x36\xf7\xb8\xbb\x6f\x3a\x67\xe7\xf3\x9c\xe7\x39\xe7\xfb\x9c\xf3\x7d\xfb\x39\xbd\x97\x11\x81\x41\xbb\xa2\x01\x00\x98\xc8\x9d\x74\x26\x00\x00\xbf\xb4\x28\x5b\x00\x80\xb0\xb0\x70\x66\x29\x70\x76\x32\xf7\x00\x50\xe8\x0d\x80\xe4\x04\x00\xef\x01\x00\x92\xd7\x00\x88\x21\x00\x2c\xa9\x00\xd0\x2a\x01\xc0\xf1\x15\xad\x31\xdb\x00\x00\xb6\x69\xbb\x22\xe8\x60\x71\x69\xae\xaa\x6b\x2a\x00\x00\x48\x51\xe4\x9e\x1d\xc8\x21\x07\x94\xd5\x06\x60\xd5\xaf\xbc\x02\x00\xc8\x14\xed\x48\x10\x31\xd9\xf9\x78\xbe\x20\x27\x83\x77\x88\x8b\x17\x1d\xe1\x73\xf1\x6c\x3e\x1f\x06\xe8\xa5\x8b\xc6\xff\x07\xb2\x1f\xda\x8f\xea\x47\x25\xb1\x21\x08\x0a\x80\xfe\x0b\x0c\x41\x64\x18\x82\x21\x12\x04\x41\x5b\xff\xf7\x62\x43\x9f\xe0\x0f\x51\xa8\x14\x32\x05\xde\x4a\xa6\xc0\x4b\x19\xfd\xcb\xc5\x20\x07\x00\x6c\x0e\x47\xd2\x43\x59\x09\x1d\x7f\xbb\x94\x75\x2a\x2e\xce\xb9\xac\xaa\xf1\x77\xf9\xc2\x75\x1e\x27\x00\x5b\xc9\xd1\x57\xa7\x9d\x1a\x76\x3c\xe0\x8c\x58\xc1\x1c\xfb\xfe\x86\x74\x35\x9a\x19\x7c\x42\x56\x32\x4b\x38\x1d\xee\x89\x92\x95\x96\x37\x88\x6e\xdb\xff\x54\xd9\xcc\x3a\x4b\xf2\xeb\x21\xf9\x65\x6f\xde\x6c\xd0\x08\x44\x82\x74\x1f\xb1\x42\x27\xff\xf9\xed\x78\x17\x55\x78\x33\xab\xea\xce\x39\xd3\x8f\xea\x7b\xb3\x25\x13\x0b\xbf\x4d\x7c\x99\x95\xf3\xb9\xb4\xb2\xe9\x0d\x4d\xe3\x99\x8a\xdc\xbb\x6c\x23\xc1\x23\x68\xf7\xa4\x79\x5d\xd9\xbc\x2a\xab\xed\x1c\x7c\x4b\x38\xf2\xcc\x7e\xf7\xf5\x91\x0f\x5f\x66\xeb\x5d\x61\x74\x99\x55\x00\x86\x66\xdf\x10\x10\x5b\xad\x7a\xbc\x58\x4a\xa5\x3f\x2e\x60\xed\xc3\x26\xb5\x13\x92\x4d\x60\x0e\x6d\x88\xbc\xc1\xee\x65\x17\x2d\x7e\x76\x25\xfa\xf7\xda\xe9\xb0\xfe\x34\xdf\xb5\xd1\x9b\x20\x49\x4a\x52\x2a\xf3\x8c\x79\xf0\x29\x94\x1d\x1b\xac\x29\x31\x90\x35\x33\xa7\x46\x91\x52\x47\xbb\xf0\x93\x47\x4b\xc6\x74\x49\xc6\x7c\x86\xb3\xc6\x5b\xd7\x59\xbe\x3c\x3e\x6a\xdb\xd7\x07\x9f\xf3\x77\x53\xcc\x44\x67\x6d\xbb\x63\xeb\xfb\x60\xf2\x64\xf2\x05\x4b\xbc\xfb\xd1\x92\xc7\x1f\xa4\x81\x96\x2e\x35\x71\xf8\x40\xd3\x9f\x30\x93\x92\xfb\xcb\x72\xc0\xbf\x60\xbb\x74\x17\x52\x99\xf3\x24\x6b\xed\x65\x0d\xb9\xf7\x7a\xed\xdc\xfe\xb7\x6e\xa8\x41\x50\x21\x1b\x58\x57\xe7\x73\x4e\x4c\xa1\x9c\x3d\xea\xa3\x52\xda\x3f\x3a\xf2\x9d\x2f\x63\x51\x4b\x9a\xa4\x34\xb9\x9e\x45\x3a\x07\xd9\x96\x60\x62\x1a\x52\xd9\x1c\x6e\xe3\xea\x08\xcf\xeb\x13\x85\x2f\x3e\x26\xe2\x94\x09\xae\xe5\x82\x78\x43\x6e\x16\x55\xa9\x60\xaf\xdc\x53\xf9\xda\x5f\x6f\xfd\x8f\x47\x6b\x1a\xe9\xac\xa7\x17\xe4\x48\x42\x5a\x86\xaf\x53\x74\x5b\x45\x95\xe5\x48\x86\x79\x3b\x79\x83\x89\x00\x3f\x8c\xdb\xa7\x52\xf7\x8c\xf4\x26\x38\x16\x80\x71\xa2\x37\x35\xb7\x68\xe5\xab\x52\x6d\x71\x76\x2c\xc1\x77\xd7\x87\x0b\x48\xb9\x9e\xda\xd6\xc2\x4d\xba\xa4\xf5\xf2\xb0\x1c\x43\x06\xb9\x36\xd8\xcd\x6e\x42\x84\x08\x6c\x1f\xec\x73\xda\x2d\xa7\xb5\xe7\x74\xa8\x02\xd5\x1e\x5d\x25\xc6\xb6\x86\xba\xa9\xc3\xa7\xbd\x9b\x6d\x69\x3d\x0e\xe6\x43\xb6\x85\x32\x4d\xe7\x20\x6a\x8b\xe6\xb6\x5c\xcc\xad\xb1\x39\x36\xea\x8a\xcf\xe5\x1d\x9e\x7e\x79\xed\x5e\xd7\x0f\x4e\xb3\xf7\x41\x60\xf8\x85\xf8\xaa\x71\xf0\x28\xc5\xe9\x57\xcd\x02\x03\xa7\x1d\xfb\x27\x66\x75\xff\xfa\xe5\xaf\x6e\x5c\x5a\x5e\x57\x9c\x9a\xa7\x6e\x6c\x61\xac\x21\x18\x5f\xb9\xb5\x1e\x77\x1f\xf0\x41\x8c\xd7\x79\x4f\x69\x0d\xf2\x74\x85\x5b\x4a\x2f\xe7\x61\xf5\xe6\x09\xfb\xa1\x24\xdb\xfa\xb7\xb3\x15\x59\x8e\xf1\x71\xf3\x84\xdc\x75\x13\x35\x52\x7d\x88\x2a\x33\x7c\xae\x56\x17\x28\xab\xc0\xf6\x61\x44\x2d\xc9\xaa\x6f\xb9\x6c\x4e\x5c\xef\x83\xad\x2e\x96\xfb\x29\xf7\x05\x37\x0f\x10\x6f\xba\x6d\x70\xba\x6b\x0e\x8d\x1e\xaa\xbc\xb5\x0d\x31\x4e\xdc\x84\xcb\x43\x04\x07\x82\xac\xae\x2f\x2a\xbf\x1b\xbd\xf7\xb3\xd7\x26\x10\x9e\x59\xdb\x93\xf7\x2b\xa5\xfe\x9d\x87\x46\xfc\x56\x01\xf2\x12\xdf\x3d\x09\xb4\x0b\xb9\x8d\x23\xe2\xca\xb7\x18\x7f\x11\x9f\x5e\x4f\x8c\x25\xf8\x76\x3f\x33\xf9\xbc\x9a\x69\x3d\x69\x9e\x49\xac\x37\x5a\xf9\x7b\x1a\x5f\xb4\x8f\xc6\x9c\x21\x2b\x6c\x9e\xf5\x63\x87\x45\xa1\x06\x43\xc1\x99\x66\x49\x41\xd1\x01\xe5\xb7\x77\x85\x83\x33\x91\x67\x3e\xb3\xb8\xef\x35\xd9\xcf\x25\x0e\xf5\x79\x8f\x6c\x8e\x1b\xa2\x31\x5e\xee\x77\x10\x5a\xd5\x17\xe9\xc7\x9f\x20\x07\x7d\x78\xef\x43\xd3\xe4\xd6\xec\x04\xd5\xc3\x93\x04\xaf\xbf\x78\x72\xc3\xd2\x3a\xf2\x11\x07\x43\xdc\x25\x77\xa7\xd0\x36\xd1\xfa\x5b\x35\xa1\x2f\xb8\x5d\x73\xb7\x94\x09\xd2\x61\x8b\x2c\xb0\x43\xb7\xea\x83\x27\x49\xe2\x83\x83\x45\x40\x28\x74\x9f\x26\x14\x5d\xc1\xf8\x34\xa6\x04\x7d\xbc\x3a\xb4\xe6\x47\xbe\x98\xb5\xea\x6c\xe9\x7e\xba\x8b\xf9\x41\xcd\xf9\x62\x24\x6a\xd2\x61\x5a\xb9\x60\xdc\xee\x39\xbf\x4d\x39\xed\x85\x75\x16\x5a\xf5\x1d\xbf\x86\x0b\xbb\x9a\x83\xa2\x1c\x35\xac\x73\x94\x7d\x13\x81\x37\x3c\xcf\xec\xfc\x61\xf4\xef\x4e\x2b\xf7\x47\xb9\x37\x95\x3e\x79\xfc\xfd\x41\x41\x0c\xe2\x7c\xab\xd7\x47\xab\xa6\xe1\xcb\xa7\x44\xc9\xb8\x43\x73\x0e\xd6\x31\x03\x11\xde\xe7\x05\x56\x79\x7f\x0e\x78\xda\xff\xf2\x76\xac\x63\x62\xee\x00\x3a\xde\x14\x97\x5c\x9c\x8e\x70\xb9\xd8\x99\x8c\x62\xea\xab\x47\x82\xdb\x33\x4c\x90\x9f\x9f\xab\x8b\x3f\x4d\xfa\xf5\x9b\x94\x6e\xa1\x87\xcb\x42\xdd\xfc\x20\x7a\x6d\x95\xcb\x9e\x62\xde\xf2\xf3\x96\xaf\x76\x69\x06\x61\x5c\xb9\x7e\xc6\xae\x69\xbe\xac\xe0\xd8\xdd\x55\xda\x95\x76\xd5\xbf\xa1\x3a\xd6\x0e\xb1\x3a\x7f\x7a\x1e\xe2\xde\x5c\xda\x78\xe7\x5a\xad\xaf\x3c\x24\x4a\xd5\x72\xc2\x98\xa9\xf1\x2c\x94\xe6\x73\xca\xfa\x5a\xa2\x76\xb4\xd9\x21\x38\xd8\x15\xcd\x63\x53\xdb\x19\xcb\xd2\xf2\xc5\x2e\x1b\xea\x52\xc5\xb1\x3c\xcb\x37\xaf\x4d\xb9\x2d\x18\xdd\xe5\x37\xdb\xfb\x3a\xfe\x3a\x25\x21\xab\xad\x6d\xd4\x9f\x6f\xfd\x4a\xbb\xd8\xd7\xad\x3a\x5e\xbf\x60\x90\x01\x00\xd6\x2f\xf9\x2e\x9d\x2d\xe2\xd2\x38\x02\x2e\x5b\xc4\x05\x24\x08\xa6\x10\x61\x12\x11\x0a\x60\x41\x30\x8d\x4c\xa5\x41\x10\x01\x82\x69\x10\x94\x79\x91\xa5\xf8\xa4\x90\x9d\x93\xce\xcb\x38\xf2\xc7\x05\xb7\xee\xb1\x25\x5f\x7f\x51\xc8\xfa\x3f\x46\xe5\xf1\x45\x1c\x00\x0a\x14\x23\xef\x1c\x50\xb9\xf1\x1b\x37\xf6\x44\xeb\x7a\x23\x47\x99\xc0\xda\xcb\x7e\x0b\xc7\x1e\xeb\x85\xdd\x55\xb1\xca\x1a\x8b\xa7\x4b\xfc\x3a\xd2\xad\xbd\xee\xb0\xf0\x3a\xe3\x40\xb7\xb6\x57\xeb\xae\x45\xea\x24\x3b\xaf\x46\x6d\x01\x16\xdc\x0a\xd1\xbb\x30\xff\x8b\x00\x00\x10\xb9\x83\x41\xbf\x19\x96\x5a\xfa\xef\x00\x00\x00\xff\xff\x2f\x20\xca\xf0\x33\x06\x00\x00")

func favicon32x32PngBytes() ([]byte, error) {
	return bindataRead(
		_favicon32x32Png,
		"favicon-32x32.png",
	)
}

func favicon32x32Png() (*asset, error) {
	bytes, err := favicon32x32PngBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "favicon-32x32.png", size: 1587, mode: os.FileMode(420), modTime: time.Unix(1500966923, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _indexHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x59\x6d\x73\xdb\xb8\x11\xfe\xae\x5f\xb1\xe6\x75\x4e\xd2\x9d\x48\xca\x4e\x32\x49\x65\x52\x97\x4e\x72\x9d\xe6\x3a\x37\x4d\xef\xc5\xd7\x4e\x26\x93\x81\xc8\x95\x88\x18\x04\x18\x00\xa4\xac\xa6\xfe\xef\x1d\x80\x6f\xa0\x44\x3b\xce\xbd\x4c\xf3\xc1\x21\x96\x8b\x7d\x16\x8b\x07\xbb\x4b\x28\x3a\x7b\xf9\x8f\x17\x3f\xfd\xfb\xf5\xb7\x90\xe9\x9c\xad\x27\x51\xfb\x1f\x92\x74\x3d\x01\x88\x72\xd4\x04\x92\x8c\x48\x85\x3a\xf6\x4a\xbd\xf5\x9f\x79\xfd\x8b\x4c\xeb\xc2\xc7\x0f\x25\xad\x62\xef\x5f\xfe\xcf\x7f\xf1\x5f\x88\xbc\x20\x9a\x6e\x18\x7a\x90\x08\xae\x91\xeb\xd8\x7b\xf5\x6d\x8c\xe9\x0e\x9d\x79\x9c\xe4\x18\x7b\x15\xc5\x7d\x21\xa4\x76\x54\xf7\x34\xd5\x59\x9c\x62\x45\x13\xf4\xed\x60\x01\x94\x53\x4d\x09\xf3\x55\x42\x18\xc6\xe7\xc1\xb2\x36\xa4\xa9\x66\xb8\xfe\x51\x13\x5d\xaa\x7f\x96\x22\x0a\x6b\xc1\x11\xc6\x4b\x54\x89\xa4\x85\xa6\x82\x3b\x30\x3f\xd2\xbc\x60\x08\xca\x4e\x86\x5c\x70\xaa\x85\xa4\x7c\x07\x5b\x21\x61\x8f\x1b\x45\x35\xaa\x1a\x86\x51\x7e\x0d\x99\xc4\x6d\x3c\x35\xab\x55\xab\x30\xdc\x0a\xae\x55\xb0\x13\x62\xc7\x90\x14\x54\x05\x89\xc8\xc3\x44\xa9\x6f\xb6\x24\xa7\xec\x10\xff\x20\x36\x42\x8b\xd5\xa3\xe5\x72\xf1\x78\xb9\x5c\x3c\x59\x2e\x17\x4f\x97\xcb\xff\x7e\x4f\x34\x4a\x4a\xd8\xd7\xaf\x12\xc1\xd5\x14\x24\xb2\xd8\x53\xfa\xc0\x50\x65\x88\xda\x03\x7d\x28\x30\xf6\x34\xde\x68\x63\xed\x18\xde\x6b\xe1\x4b\x5e\x5c\xef\x2c\x66\x55\xa2\xa6\xdb\xc3\xf3\x65\x70\xfe\x38\x78\x12\xa6\x54\xe9\x56\x16\xe4\x94\x07\xc6\xca\xa7\x61\xa2\xd0\x80\x1c\xa3\xd5\x33\x1e\x68\xa2\x9b\x6b\x35\x69\x62\x82\x5d\xeb\xd0\x9c\xec\x30\x2c\xf8\xce\x6b\xec\x6e\x49\x65\xde\xfb\x8f\x2e\x6e\x1e\x5d\x04\xf6\x85\xa2\xff\x41\x15\x7b\x56\xe2\xad\x27\x51\x58\xb3\x2f\xda\x88\xf4\x60\x4d\xa7\xb4\x02\x9a\xc6\x1e\x29\x0a\x8b\x05\x10\x55\x3e\x29\x8a\xfa\xd9\x8e\x38\xa9\xe8\x8e\x98\x6d\xf6\x53\x49\xf6\x28\x9b\x57\x00\x05\x4a\x45\x95\xd9\xf7\x4e\xb4\xca\x29\xa7\x7e\x45\x24\x25\x86\x0d\x66\x74\x55\x0f\xbc\x5e\x27\x61\xb4\x28\x30\x8d\xbd\xe6\xa1\x7f\x85\x9c\x6c\x18\xfa\x12\x8d\xe3\xfe\x9e\xe8\x24\x73\xf0\x2a\x3f\x17\xa9\x09\x43\xed\x47\x3f\x2d\x25\xf2\xba\x19\xac\x3b\x61\x54\xf9\x8c\x2a\xdd\x0b\x3a\x91\x4f\x35\xe6\x8e\xd8\x58\xde\x0a\x19\x7b\x33\xf3\x62\x01\x74\x0e\x94\x43\x8e\xbc\x34\x63\xe5\x0d\x54\x57\xd7\x78\x88\x3d\xea\x0a\xd7\x03\x85\x16\x44\x53\x86\x50\x11\x56\x9a\xfd\x94\x25\x7a\x43\xb5\xa1\xa2\x4f\x12\x13\xe1\x63\x15\xab\x64\x36\x15\x12\x46\x94\x8a\xbd\x9d\xc4\x83\xef\x1b\x7a\x80\xf9\xe3\xfb\x8c\xee\x32\x8d\xdc\xbf\xf0\xa0\xf2\x4d\x8a\x89\x3d\xe3\x74\x60\x99\xb2\x8e\xc2\x7a\xfa\x09\x74\xf8\x69\xec\x81\x7b\xcd\xf9\x1e\xf5\xaf\xd7\xb2\x79\x02\x2a\xeb\x5f\xe3\x87\x15\xd5\x8e\x1c\xe9\xdd\xef\xd3\x28\xe0\x40\x65\xb0\xb1\xa1\xb3\xb3\x0e\x05\xc2\x21\x07\xcc\xf8\x84\xce\x0e\xd5\xb5\x10\x6c\x43\x64\x1b\x6c\x89\xa9\x07\x5b\x7a\x83\xa9\x65\x58\x6f\xd7\xe5\x58\x33\xc7\x57\x34\xc5\x7a\xab\x9e\x27\x8c\x26\xd7\x01\x27\x9a\x56\x18\x28\x2d\x8a\x96\xb1\x10\xc3\x59\xc3\x5d\x1b\x91\x93\xb9\x8e\xeb\x67\xbe\xef\xc2\x6c\x34\x07\x67\xc1\x46\xd9\x19\x8e\x41\x3a\x67\xcf\xe0\x8e\x1e\xc5\xa3\xc3\x61\xdd\x6f\x69\xe4\xce\xff\x06\xa6\x49\x86\x95\x14\xfc\x9d\x34\x84\x9b\xc2\xaa\x97\x30\xdc\xea\xe9\x18\xd7\x8c\x64\xa3\xf9\x48\xdc\xda\x25\x7d\xde\x8a\x9a\x74\x61\x56\x73\x92\x39\x46\x56\xb2\xde\xe3\xe6\x01\x4e\xfd\x1a\x4f\x6a\x52\xc4\x70\x66\x1f\xee\xf7\x42\x62\x2e\x2a\x7c\x80\x23\xbe\xbf\x1e\x23\xd6\xf0\x50\x39\xe7\x69\xa0\x30\x98\xaa\x0a\x92\xa0\xb4\x4a\xcd\xe3\x7d\xbc\xfa\xbc\xa5\xdb\xfd\x7f\xd9\xd1\xd9\x19\xde\x1f\x06\x93\x4e\x3f\x2b\x08\xce\x12\x3b\x51\x4e\xe8\x70\xe7\x4c\x9a\x20\x94\xa3\x84\x2d\x2b\x69\x3a\x00\x2e\xc8\xee\x28\x49\x0c\x25\x06\xa0\x9b\xdf\xa3\xba\x18\x4e\xb4\xee\xad\x84\x1a\xf3\x42\x48\x22\x0f\x7d\x91\xb3\x81\x69\xc2\xe5\x9d\x96\xb0\x91\xb8\x3d\xb8\x74\xdd\x53\x6f\x06\x3b\xd6\xa0\x74\xdb\xf4\xdb\x2a\x90\xad\x34\xeb\xc4\xb4\xa1\x12\xdf\x11\x29\xc5\x5e\xfd\x6e\xf5\xa5\x69\x39\xf7\x54\x27\x19\x34\xc9\x72\x66\xd7\x02\x39\xce\x3f\x59\x3d\xfe\xd0\xc2\xe0\x50\xd2\xf4\x09\x42\xa3\x84\x95\x3d\xf8\x4d\x22\x70\xe2\x1a\xa9\x82\xf0\xf5\x97\x89\x28\x0e\x97\x70\xb1\x3c\x7f\x1a\x85\x56\xe2\xe0\xd4\x16\x9a\x66\x2b\xec\xba\xad\x28\x4c\x69\xb5\x9e\x4c\x1a\xca\x45\x75\x73\xed\xf6\x83\x37\xbe\xa1\x19\x23\x1a\x3d\xdb\xb3\x19\x36\xf7\x4d\x1b\x23\x07\x51\x6a\x48\x04\x2b\x73\x0e\x84\xd1\x1d\xf7\x13\xe4\xda\xa1\xb6\x05\xe8\x3c\xa5\xf9\x0e\x94\x4c\x62\x2f\x08\xab\xba\x5b\x24\x4c\xc7\xde\x55\xd3\xe5\xbe\x57\x5e\x5b\x07\xf3\x8d\xff\xc4\x83\x0c\x6b\x46\x9f\x2f\x97\xc5\x8d\x07\x61\xbf\x26\xc7\x6e\xb4\x61\x22\xb9\xfe\x50\x0a\xed\x6c\xc3\x97\x5f\x3c\xbb\xb8\x58\x5e\xfe\x95\x4a\xa5\x17\xa0\x04\xab\x10\x74\x86\x50\x48\xb1\x61\x98\x07\xf0\x53\x86\x7c\x01\x7b\x49\x75\xfd\x22\x11\x29\x06\x76\xd6\xf9\x65\xef\xb0\x1b\xb8\x36\xda\x39\x61\xec\x88\x0a\x98\xaf\xbf\xcc\x53\xa2\xb2\xcb\xef\x44\xc6\xc1\xfc\x51\x82\x47\xe1\xf0\xdc\x44\xe1\xd1\xdc\x28\x1c\xda\x8f\xc2\xe3\xa5\x58\xd2\xd8\x28\xd7\xfb\x55\xef\x90\x79\x36\x0c\x99\x4c\x6a\xa5\x87\xee\x5b\x8b\x3b\x19\x9c\x06\xd0\x7b\xe1\x33\xca\x11\x54\xb9\x31\xcd\xfa\xd1\x82\xdd\xb3\x4e\x2a\xa2\x89\x6c\x7b\x57\x43\x70\xd3\xb6\xd6\x2d\x2b\x54\xfe\x86\xf2\xb4\x69\x56\x9d\x46\xec\xce\xd4\xe1\xd7\xe6\x46\x4e\x69\xd3\x15\x58\x7b\x0d\x23\xde\x74\x3d\xe6\x0b\x23\x78\xeb\xad\x3f\x7e\x84\x4e\x06\xb7\xb7\xe3\x89\xe1\x28\x2d\x8c\x00\x3e\xa4\xe9\x1c\x49\x1c\x2d\xba\xf9\x32\x6d\xd0\x3f\xd5\x6d\xba\x1a\xaa\xdc\x1c\x19\x2a\x25\x3b\xb1\xd3\x6b\xdd\xb3\xa8\xf1\xbe\xd5\x2d\xba\xa7\x81\xbf\x2b\x3d\x9a\x9e\xcf\xc6\x53\xd2\xa2\x38\x5d\xc2\xc3\x3f\x0e\xce\xbd\x35\xe5\x5b\x71\x5f\xb6\x1e\x14\xe1\x91\xbd\x1a\xf1\xd1\xed\x57\xee\x4c\xc1\xc3\x4c\xeb\x1e\x1a\x80\xe3\x64\x67\xa4\x78\x53\x08\xa9\x21\xc5\x2d\x29\x99\x86\x8f\x56\x31\x25\x9a\xc0\x6c\xde\x8c\x00\x24\xea\x52\xf2\x6e\x08\x35\xe9\x57\xf0\xc6\xf1\xe7\xa3\x0d\xdd\x0a\xa6\x5b\xc1\x52\x94\xd3\x05\x74\x74\x5d\xc1\xd4\x84\x0a\xba\xf0\xc0\x3e\xa3\x1a\xeb\xd0\x4d\x17\x60\x37\x79\x05\xd3\xd7\x99\xd0\x42\x4d\x17\xe6\x2c\xb6\xb2\xef\x08\x87\x3f\x2f\x4c\x6a\x7f\x3c\x85\xdb\xc5\xef\x0b\xf8\x03\x26\xb4\xc0\x11\xc4\xf3\xa7\x7f\x14\xe4\x2f\x42\x5e\x9f\xe2\x5d\x3c\xeb\xf0\x3a\xb8\xb7\x8b\x61\xb8\x2f\xee\x88\x37\x51\x8a\xee\x78\x8e\x5c\x1f\xf9\xb3\x61\x25\xde\xe1\xc5\x15\x49\x6c\xe5\x05\xaa\x4d\x33\x46\xe4\x61\xc4\xa7\xe5\xfd\x31\x48\x08\x63\xef\xb4\x78\x57\x53\xf5\x08\x9b\xe4\x1b\x94\x77\x80\xff\xdd\x34\x1d\xc8\xc1\x34\xea\x29\xb2\x91\xe8\x8f\x21\xbf\x6d\x9e\xea\x00\x99\xbf\xb7\x93\x9e\xde\xb6\x22\x58\x76\x47\xa6\x63\x12\x1c\xb9\x6e\x73\x28\x55\xb1\x97\x94\x52\x22\xd7\x57\x14\xf7\x75\x4e\xee\xb5\x92\x8c\xf0\x1d\x2a\xd8\x1b\x9f\xaa\x3c\x70\x54\xdb\x77\x67\x30\x89\xc2\x6e\x46\x8d\xd6\x97\x1e\x5b\xd4\xdb\x2b\x2d\xf2\x9e\xdc\x1c\x5f\xa8\x19\x59\xc8\xe8\x46\x85\xef\x3f\x94\x28\x0f\xe1\xa3\xe0\x22\x38\x6f\x06\xf6\x7a\xeb\xbd\xbd\xbc\xea\x4f\xe5\xa8\xe9\xc1\x6d\xd9\xf3\x8b\xe0\x71\x70\xd1\x5d\x94\xfd\x0a\x0b\x77\xde\xb7\xdd\x61\x6a\x3d\x09\xbf\x9a\x54\xa6\x00\xe6\x10\x03\xc7\x3d\x5c\x95\x38\x33\x39\x01\xd9\x0a\xa6\x5f\xe0\x0d\xc9\x0b\x86\x53\xb3\x65\x26\x81\xac\x9a\x7c\xe1\xc4\x73\x05\xd3\xfe\x86\x72\x6a\xb6\xd0\x28\x77\x81\x55\xed\x94\x5e\x69\x05\x1f\xa1\x65\x41\x21\x94\x55\xe9\x04\x44\x26\x19\xad\xb0\x16\x59\x42\xdc\xce\x27\x5f\x85\xc6\x4f\x00\xe3\xe9\xdf\x44\x8e\x10\x37\x46\xdb\xa6\x60\x05\xd3\xa8\x58\xff\x82\x2c\x31\x6f\x33\x91\xe3\x59\x14\x16\x6b\xeb\xce\xe4\x37\x2f\xd0\x40\x3a\xae\x4c\xae\x4a\x0c\xba\x05\xce\xa6\xa6\x17\x99\x2e\xec\x44\xc7\x9f\x2f\x6a\x71\x67\x77\x5b\x72\x7b\xa8\xba\x14\x7c\x94\x80\xdb\xf4\xfb\xb6\x3f\x0b\x66\x72\x8e\x3a\x13\x69\x17\x45\x26\x48\xfa\x72\x60\xcf\xcd\xe9\x7f\x0a\x76\xa8\x67\xd3\x90\x14\x34\x4c\x32\x4c\xae\x55\x38\x9d\x77\xa7\x2d\xd0\x19\xf2\x99\x44\x55\x08\xae\x10\xe2\xb5\x93\xfc\x13\xc1\x95\x60\x18\x30\xb1\xeb\x34\xfa\x99\x5b\x21\x61\x66\xa2\x48\x21\x86\xe5\x25\x50\x88\xa0\xd5\x0a\x18\xf2\x9d\xce\x2e\x81\x7e\xfd\xf5\xdc\xb1\x08\x40\xb7\xd0\xd9\x7a\x43\xdf\x06\x54\xbd\x2b\x8b\xa1\xca\x10\xd8\xa3\x0a\x7e\x7e\xed\xcd\x2f\x07\x1a\x03\x13\xa6\x52\xc7\xe0\xd9\xc5\x79\xf7\xeb\xd9\xb4\x65\x94\x77\x12\x91\xbb\x79\x6b\x30\xf1\x16\x90\x29\xfc\x84\x57\xa9\xd8\xf3\x07\xf9\xc5\x90\xc8\x87\xfa\x25\x31\xbd\xdb\xab\xc9\xe9\x93\xce\xa8\x0a\x2c\x4d\x20\xee\xac\xb6\x93\x6e\xe7\x41\x42\x74\x92\xcd\x66\x28\xe5\xdc\x6c\xae\xbb\x06\x23\x9b\x5f\x4e\x86\xd4\xb2\x47\x4a\x22\x49\x0f\x63\x6c\xb2\x68\x2d\xdd\x66\xed\x64\x85\xfa\x95\xf9\x1e\xaa\x08\x9b\x8d\x31\xf0\x64\x96\x45\x0c\x4c\xce\x9e\x99\x77\xf3\x05\x3c\x5a\x2e\x97\xcb\xf9\x25\xb4\x6e\x7c\x15\x9a\x7c\x21\x91\x68\x4c\xff\x6f\x8e\x4c\x6e\x5b\xc3\x6e\x8e\x30\xff\xea\x3c\x41\x8a\x62\xda\xd6\x2d\x37\x4f\x58\xb2\xd4\xf7\x68\x2b\xd0\xb2\xc4\xbe\xb8\xd5\x1f\xc0\xc7\x52\xfb\xb1\xbb\x82\x2d\x61\xca\x91\x76\xf7\xe4\x77\xf4\x03\x9a\xe6\x68\xbe\x68\x9c\x8a\xfb\x7d\x9d\x4f\xef\xe8\x2e\x9c\x8b\xc7\x13\xb0\x30\xb4\x37\x19\xc7\x9e\x35\xe2\x97\x8d\xdb\x47\x93\x5a\xd8\xee\x17\xad\xe9\xb0\x76\xcf\x07\x9f\x73\x93\x49\x14\xd6\xbf\x8f\x44\x61\xfd\x9b\xdd\xff\x02\x00\x00\xff\xff\xa3\x19\x11\x2f\xcb\x1b\x00\x00")

func indexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_indexHtml,
		"index.html",
	)
}

func indexHtml() (*asset, error) {
	bytes, err := indexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "index.html", size: 7115, mode: os.FileMode(420), modTime: time.Unix(1501223929, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _stylesCss = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x8f\x41\x6a\xc3\x30\x10\x45\xf7\x3a\xc5\x94\xee\x0c\x6a\x42\x68\x37\xca\xb2\x47\xf0\x09\x14\x6b\xe2\x4c\x91\x46\x61\xf4\x03\x31\xa5\x77\x2f\x36\x98\x6c\xec\xb5\xde\x7b\xfa\x73\xe8\x3a\xfa\xee\x7b\xea\x31\x65\x6e\xd4\x1d\x9c\x7b\x1f\x19\x10\x1d\x7d\x43\x34\x70\xa2\x0f\x51\x58\xa5\x5f\x47\x94\xa4\xdd\x73\x9c\x02\x5d\x33\x3f\xcf\x8e\xe8\xe7\xd1\x20\xd7\xc9\x0f\x55\xc1\x8a\x40\x03\x2b\xd8\xe6\xa7\x12\x6d\x14\x0d\xf4\x69\x5c\xe8\x78\x76\x7f\x5b\xe9\x21\x5a\x5a\xca\x97\x6a\x89\xcd\x5b\x4c\xf2\x68\x61\xe6\xd7\x82\xbf\x54\xa0\x96\x40\x5f\xc6\x65\x3b\x13\x97\xc4\x50\x73\xb5\x40\xa2\x37\x36\xc1\xce\x87\x59\x1a\x16\x7a\x9d\x77\xa4\xd3\x3c\xf0\x4d\xca\xbd\x1a\xa2\xee\x88\x25\x8a\x2e\x1e\xf8\x09\x1f\xb3\x8c\xfa\x3a\x76\x4b\xb8\x9d\xf6\xf1\xff\x00\x00\x00\xff\xff\xa6\xd6\x81\xef\x76\x01\x00\x00")

func stylesCssBytes() ([]byte, error) {
	return bindataRead(
		_stylesCss,
		"styles.css",
	)
}

func stylesCss() (*asset, error) {
	bytes, err := stylesCssBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "styles.css", size: 374, mode: os.FileMode(420), modTime: time.Unix(1500966923, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"favicon-32x32.png": favicon32x32Png,
	"index.html": indexHtml,
	"styles.css": stylesCss,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"favicon-32x32.png": &bintree{favicon32x32Png, map[string]*bintree{}},
	"index.html": &bintree{indexHtml, map[string]*bintree{}},
	"styles.css": &bintree{stylesCss, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

